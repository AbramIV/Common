#include <stdio.h>
#include <stdint.h>

#define readBit(reg, bit)       (reg & (1 << bit))
#define setBit(reg, bit)        (reg |= (1 << bit))
#define resetBit(reg, bit)      (reg &= ~(1 << bit))
#define toggleBit(reg, bit)     (reg ^= (1 << bit))

#define setBits(reg, exp)		(reg |= (exp))
#define resetBits(reg, exp)		(reg &= ~(exp)) // bits which need to reset must be set as 1

#define bit0 0
#define bit1 1
#define bit2 2
#define bit3 3
#define bit4 4
#define bit5 5
#define bit6 6
#define bit7 7

uint8_t port8 = 0x00;
uint16_t port16 = 65535;
uint32_t port32 = 4294967295;

uint8_t expression1 = 0x01 << 0;
uint8_t expression2 = 0x02 << 0;
uint8_t expression3 = 0x03 << 0;

int main() 
{
    printDecAsBin("port8", port8);
	
	port8 |= ((1 << bit0)|(1 << bit1)|(1 << bit3)) & ~(1 << bit2);    
    
	if (readBit(port8, bit3))
        printf("true\n");
    
    setBit(port8, bit6);
    printDecAsBin("port8", port8);
    
    resetBit(port8, bit1);
    printDecAsBin("port8", port8);

    toggleBit(port8, bit3);
    printDecAsBin("port8", port8);
    
    resetBits(port8, 0x00);
	printDecAsBin("expression1", setBits(port8, expression1));
	
	resetBits(port8, 0x00);
	printDecAsBin("expression2", setBits(port8, expression2));
	
	resetBits(port8, 0x00);
	printDecAsBin("expression3", setBits(port8, expression3));
	
    printDecAsBin("Port16", port16);
    printDecAsBin("Port32", port32);
    
}

void printDecAsBin(char *label, uint32_t n)
{
    uint8_t size = 0;

    printf("%s %lu = ", label, n);
    
    if (n >> 16 > 0) size = 32;
    else if (n >> 8 > 0) size = 16;
    else size = 8;
    
    for (int i = size-1; i >= 0; i--)
    {
        if ((n & (1 << i)) > 0) printf("1");
        else printf("0");
    }
    
    printf("\n");
}