#include <stdio.h>
#include <stdint.h>

#define readBit(reg, bit)       reg & (1 << bit)
#define setBit(reg, bit)        reg |= (1 << bit)
#define resetBit(reg, bit)      reg &= ~(1 << bit)
#define toggleBit(reg, bit)     reg ^= (1 << bit)
#define setBits(reg, exp)		(reg |= (exp))
#define resetBits(reg, exp)		(reg &= ~(exp))

int main() 
{
    /* Necessary manuals for STMF401CCU6
        1. PM0214 Programming manual
        2. RM0368 Reference manual
    */
    
    /********************************* INTURRUPTIONS *********************************/
    
// All of the interruptions are controlled by NVIC - Nested Vectored Interruption Control
    
// Example shows how to define external interruptions on pins: PINA0, PINA1, PINA2, PINA3 
    
// 0 Configure bus clock and GPIO
	setBit(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN_Pos); // System configuration -> clocking
	
	setBit(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN_Pos); // GPIOA -> clocking
	
	setBits(GPIOA->MODER, GPIO_MODER_MODER0_0);   // GPIOA0 -> input
	resetBits(GPIOA->MODER, GPIO_MODER_MODER0_1); // GPIOA0 -> input
	
	resetBit(GPIOA->OTYPER, GPIO_OTYPER_OT0_Pos); // PINA0 type -> push pull
	
	resetBits(GPIOA->OSPEEDR, GPIO_SPEEDR_OSPEEDR0_0); // PINA speed -> low
	resetBits(GPIOA->OSPEEDR, GPIO_SPEEDR_OSPEEDR0_1); // PINA speed -> low
	
	setBits(GPIOA->PUPDR, GPIO_PUPDR_PUPDR0_0);   // PINA -> pull up
	resetBits(GPIOA->PUPDR, GPIO_PUPDR_PUPDR0_1); // PINA -> pull up
	
// I Configure the mask bits of the 23 interrupt lines (EXTI_IMR)
    setBit(EXTI->IMR, EXTI_IMR_MR0_Pos); // Interrupt line 0 is active
    setBit(EXTI->IMR, EXTI_IMR_MR1_Pos); // Interrupt line 1 is active
    setBit(EXTI->IMR, EXTI_IMR_MR2_Pos); // Interrupt line 2 is active
    setBit(EXTI->IMR, EXTI_IMR_MR3_Pos); // Interrupt line 3 is active
    
// II Configure the Trigger selection bits of the interrupt lines (EXTI_RTSR and EXTI_FTSR)
    resetBit(EXTI->RTSR, TR0); // Interrupt line 0 raising trigger is disabled
    resetBit(EXTI->RTSR, TR1); // Interrupt line 1 raising trigger is disabled
    resetBit(EXTI->RTSR, TR2); // Interrupt line 2 raising trigger is disabled
    resetBit(EXTI->RTSR, TR3); // Interrupt line 3 raising trigger is disabled
    
    setBit(EXTI->FTSR, TR0); // Interrupt line 0 falling trigger is disabled
    setBit(EXTI->FTSR, TR1); // Interrupt line 1 falling trigger is disabled
    setBit(EXTI->FTSR, TR2); // Interrupt line 2 falling trigger is disabled
    setBit(EXTI->FTSR, TR3); // Interrupt line 3 falling trigger is disabled
    
// III Configure the enable and mask bits that control the NVIC IRQ channel mapped to the
	resetBits(SYSCFG->EXCTICR[0], SYSCFG_EXTICR1_EXTI0); // EXT0 is PINA0
	resetBits(SYSCFG->EXCTICR[1], SYSCFG_EXTICR1_EXTI0); // EXT1 is PINA1
	resetBits(SYSCFG->EXCTICR[2], SYSCFG_EXTICR1_EXTI0); // EXT2 is PINA2
	resetBits(SYSCFG->EXCTICR[3], SYSCFG_EXTICR1_EXTI0); // EXT3 is PINA3
	
// Enable using NVIC hints
    NVIC_EnableIRQ(EXTI0_IRQn);
    NVIC_EnableIRQ(EXTI1_IRQn);
    NVIC_EnableIRQ(EXTI2_IRQn);
    NVIC_EnableIRQ(EXTI3_IRQn);
}

void EXTI0_IRQHandler(void)
{
    setBit(EXTI->PR, EXTI_PR_PR0); // interrupt flag must be reset manually writing "1"
}

void EXTI1_IRQHandler(void)
{
    setBit(EXTI->PR, EXTI_PR_PR1); // interrupt flag must be reset manually writing "1"
}

void EXTI2_IRQHandler(void)
{
    setBit(EXTI->PR, EXTI_PR_PR2); // interrupt flag must be reset manually writing "1"
}

void EXTI3_IRQHandler(void)
{
    setBit(EXTI->PR, EXTI_PR_PR3); // interrupt flag must be reset manually writing "1"
}